#include "rush/lexer/_keywords.hpp"
#include "rush/lexer/token.hpp"

#include <unordered_map>
#include <string_view>

static const std::unordered_map<std::string_view, rush::keyword_t>
	_keyword_map {
		{% for type in types %}
		{ "{{ type/name }}", rush::keywords::{{ type/name }}_ },
		{% endfor %}
		{% for keyword in keywords %}
		{ "{{ keyword/name }}", rush::keywords::{{ keyword/name }}_ },
		{% endfor %}
	};

namespace rush::keywords {
	keyword_t to_value(std::string_view kw) {
		auto it = _keyword_map.find(kw);
		return it == _keyword_map.end()
			? keywords::unknown
			: it->second;
	}

	std::string to_string(keyword_t kw) {
		switch (kw) {
			{% for type in types %}
			case keywords::{{ type/name }}_: return "{{ type/name }}";
			{% endfor %}
			{% for keyword in keywords %}
			case keywords::{{ keyword/name }}_: return "{{ keyword/name }}";
			{% endfor %}
			default: throw std::runtime_error("unknown keyword");
		}
	}
}
