#include "rush/lexer/_symbols.hpp"
#include "rush/lexer/token.hpp"

#include <string>
#include <string_view>
#include <unordered_map>

static const std::unordered_map<std::string_view, rush::symbol_token_t>
	_symbol_map {
## for symbol in symbols
## if existsIn(symbol, "symbol")
{# spacing #}
		{ "{{ symbol/symbol }}", rush::symbols::{{ symbol/name }} },
## if existsIn(symbol, "compounded")
## for compounded in symbol/compounded
{# spacing #}
		{ "{{ symbol/symbol }}{{ compounded/symbol }}", rush::symbols::{{ compounded/name }} },
## endfor
## endif
## endif
## endfor
	};

namespace rush::symbols {
	symbol_token_t to_value(std::string const& s) {
		auto it = _symbol_map.find(s);
		return it == _symbol_map.end()
			? symbols::unknown
			: it->second;
	}

	std::string to_string(symbol_token_t s) {
		switch (s) {
## for symbol in symbols
## if existsIn(symbol, "symbol")
{# spacing #}
		case {{ symbol/name }}: return "{{ symbol/symbol }}";
## if existsIn(symbol, "compounded")
## for compounded in symbol/compounded
{# spacing #}
		case {{ compounded/name }}: return "{{ symbol/symbol }}{{ compounded/symbol }}";
## endfor
## endif
## endif
## endfor
{# spacing #}
		default: return "";
		}
	}

	std::size_t precedence(symbol_token_t s) {
		switch(s) {
## for symbol in symbols
## if existsIn(symbol, "precedence")
{# spacing #}
		case {{ symbol/name }}: return {{ symbol/precedence }};
## if existsIn(symbol, "compounded")
## for compounded in symbol/compounded
## if existsIn(compounded, "precedence")
{# spacing #}
		case {{ compounded/name }}: return {{ compounded/precedence }};
## endif
## endfor
## endif
## endif
## endfor
{# spacing #}
		default: return -1;
		}
	}
}
