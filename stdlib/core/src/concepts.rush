
# The only constraint of the 'any' concept is that the parameter
# be of it's type, this is true for all parameters and as such all
# types satisfy the 'any' constraint.
export concept <T> any(val: T) => val -> T

export concept equatable(lhs: any, rhs = lhs):
requires equatable(rhs, lhs)
requires:
   lhs == rhs -> bool

export concept orderable(lhs: any, rhs = lhs)
requires orderable(rhs, lhs)
requires:
   lhs < rhs -> bool

export concept comparable(lhs: any, rhs = lhs)
requires orderable(lhs, rhs)
       & equatable(lhs, rhs)

export concept hashable(arg: any) => hash(arg) -> uint
export concept formattable(arg: any) => format(arg, "") -> string

export concept signable(val: any):
requires:
   +val -> typeof val
   -val -> typeof val

export concept numerical(lhs: any, rhs = lhs)
requires signable(lhs)
       & numerical(rhs, lhs)
       & comparable(lhs, rhs)
requires:
   lhs + rhs -> numerical
   lhs - rhs -> numerical
   lhs * rhs -> numerical
   lhs / rhs -> numerical

   lhs += rhs -> ref typeof lhs
   lhs -= rhs -> ref typeof lhs
   lhs *= rhs -> ref typeof lhs
   lhs /= rhs -> ref typeof lhs

export concept integral(lhs: numerical, rhs = lhs):
requires numerical(lhs, rhs)
       & integral(rhs, lhs)
requires:
   ++lhs -> ref typeof lhs
   --lhs -> ref typeof lhs

   lhs % rhs -> integral
   lhs %= rhs -> ref typeof lhs

export concept floating(lhs: numerical, rhs = lhs):
requires numerical(lhs, rhs)
       & floating(rhs, lhs)
requires:
   pow(lhs, rhs) -> floating

   sin(lhs) -> floating
   cos(lhs) -> floating
   tan(lhs) -> floating

   asin(lhs) -> floating
   acos(lhs) -> floating
   atan(lhs) -> floating

   sinh(lhs) -> floating
   cosh(lhs) -> floating
   tanh(lhs) -> floating

   sqrt(lhs) -> floating
   cbrt(lhs) -> floating

   log(lhs) -> floating
   log(lhs) -> floating
   exp(lhs) -> floating
   exp(lhs) -> floating
