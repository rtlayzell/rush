[identifier]
[keyword]
[integer]
[decimal]
[left-paren]
[right-paren]
[left-bracket]
[right-bracket]
[left-angle-bracket]
[right-angle-bracket]
[block-begin]
[block-end]

[equality-operator]
[lesseq-operator]
[greatereq-operator]
[logical-negation]
[logical-and]
[logical-or]

[period]
[ellipses]
[comma]
[colon]


minmax(src: indexable<number>) (min: number, max: number):
	if !src.any(): return null;
	var currMin = src[0];
	var currMax = src[0];
	for item in src[1..<src.count]:
		if item < currMin:
			currMin = value;
		else if value > currMax:
			currMax = value;

	return (currMin, currMax);

map(src: @iterable<T>, fn: T => R):
	for item in src: yield fn(item);

filter(src: @iterable<T>, fn: T => bool):
	for item in src: if fn(item) then yield item;


func(x: int &)
func(x: [int] &)
func(x: {string, int} &)
func(x: (string, int) &)
func(x: (T => R) &)

func(x: ref int)
func(x: ref [int])
func(x: ref {string, int})
func(x: ref (string, int))
func(x: ref T => R)


swap(a, b: int&)
swap(a, b: ref int)

var p = point(10, 20);
func(p);
assert(p.x == 0);
assert(p.y == 0);



import net.http as http;
import net.smtp as smtp;

main(args: [string]):
	var smtp = smtp.client();
	var http = http.client();

	var message = smtp.message();
	message.from = "reegan.layzell@workshare.com"
	message.to = ["maurice.leong@workshare.com"]
	message.body = "Hi Maurice!";
	smtp.send(message);

package math.numerics
import math;

public struct vector2:
	public let x, y: decimal

	public length:
		get => sqrt(this.lengthsqr)
		set => this *= value / length;

	public lengthsqr:
		get => dot(this, this)

	public constructor(x, y: decimal):
		this.x = x
		this.y = y

	public operator + (vec: vector2):
		return vector2(x + vec.x, y + vec.y)

	public operator - (vec: vector2):
		return vector2(x - vec.x, y - vec.y)

	public operator * (vec: vector2):
		return vector2(x * vec.x, y * vec.y)

	public operator / (vec: vector2):
		return vector2(x / vec.x, y / vec.y)

	public equals(other: vector2) =>
		return x == other.x
			&& y == other.y

	public tostring() => $"<{x},{y}>"


<range-expression> ::= "[" <range-literal> "]" | "(" <range-literal> ")"
<range-literal> ::= <short-hand-range> | <full-hand-range>

<closed-range> ::= <integer-initializer> "..." <range-finalizer>
<open-ended-range> ::= <range-initializer> "..<" <range-finalizer>
main(args: [string]):

	for 1...10: