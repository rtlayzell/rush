import std.io
import std.math

export class vector2:
public:
   var x, y: float;

   prop length => sqrt(length_sqr);

   prop length_sqr -> float:
      get => x * x + y * y;

   func this(x, y: float):
      this.{x, y} = (x, y);

   prefix +() => this;
   prefix -() => new vector(-x, -y);

   infix +(u: vector2) => new vector2(x + u.x, y + u.y);
   infix -(u: vector2) => new vector2(x - u.x, y - u.y);
   postfix *(k: float) => new vector2(x * k, y * k);
   postfix /(k: float) => new vector2(x / k, y / k);

   func reflect() => ...
   func project() => ...
   func normalize() => this /= length;


export func add(a, b: int) => a + b;
export func sub(a, b: int) => a - b;
export func mul(a, b: int) => a * b;
export func div(a, b: int) => a / b;


func main(args: string[]):
   let u = new vector2(0, 0);
   let v = -u;

   return 0;

