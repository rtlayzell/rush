## LEXICAL GRAMMAR

letter = [A-Za-z]

digit = [0-9]
hex-digit = [A-Fa-f0-9]
oct-digit = [0-7]
bin-digit = 0 | 1
non-zero-digit = [1-9]

string-char = [^\\"$]
escaped-string-char = \\[\\"nt$]


keyword ::=
	| "void"
	| "bool"
	| "sbyte" | "byte"
	| "short" | "ushort"
	| "int" | "uint"
	| "long" | "ulong"
	| "float" | "double"
	...


identifier-head ::= letter | "_"
identifier-body ::= identifier-head | digit
identifier ::= identifier-head { identifier-body }

integer-literal-suffix ::= "u" | "U" | "l" | "L" | "ul" | "UL"
hex-integer-literal ::= "0x" hex-digit { hex-digit }
bin-integer-literal ::= "0b" bin-digit { bin-digit }
oct-integer-literal ::= "0o" oct-digit { oct-digit }
dec-integer-literal ::= "0" | non-zero-digit { digit }

integer-literal ::=
	| dec-integer-literal
	| hex-integer-literal
	| bin-integer-literal
	| oct-integer-literal
	[ integer-literal-suffix ]

floating-literal-suffix ::= "f" | "F"
floating-literal ::= [ dec-integer-literal ] "." { digit } [ floating-literal-suffix ]

string-segment ::= { string-char | escaped-string-char }
string-literal ::= """ string-segment """
string-substitution ::= "$" ( identifier-string-substitution | expression-string-substitution )
identifier-string-substitution ::= identifier
expression-string-substitution ::= "{" expression "}"
interpolated-string ::= """ string-segment string-substitution { interpolated-string } """


## SYNTACTICAL GRAMMAR


primary-expression ::=
	| "(" primary-expression ")"
	| "+" primary-expression
	| "-" primary-expression
	| "++" identifier
	| "--" identifier
	| identifier
	| integer-literal
	| floating-literal

user-type ::= identifier
tuple-type ::= "(" type "," type-list ")"

builtin-type ::=
	| void
	| bool
	| byte
	| sbyte
	| char
	| short
	| ushort
	| int
	| uint
	| long
	| ulong
	| float
	| double
	| string

simple-type ::=
	| builtin-type
	| user-type

type ::=
	| simple-type
	| tuple-type
	| function-type

type-list ::= type { "," type }

function-type ::= ( "(" type-list ")" | type ) "=>" type

variadic-type ::= "..." simple-type
extension-type ::= "@" simple-type

type-annotation ::= ":" type
function-type-annotation ::= ":" [ type ]
parameter-type-annotation ::= ":" ( variadic-type | extension-type | type )

initializer ::= expression
initializer-list ::= "=" initializer { "," initializer }

identifier-pattern ::= identifier [ type-annotation ]
destructuring-pattern ::= "{" pattern "}" [ type-annotation ]

pattern ::=
	| identifier-pattern
	| destructuring-pattern

pattern-list ::= pattern { "," pattern }

pattern-initializer-list ::= pattern-list initializer-list
constant-declaration-list ::= "let" pattern-initializer-list
variable-declaration-list ::= "var" pattern-initializer-list

parameter-set ::= parameter { "," parameter } parameter-type-annotation
parameter-set-list ::= parameter-set { "," parameter-set }
parameter-list ::= "(" [ parameter-set-list ] ")"


function-body ::= "=>" expression | ":" [ type ] statement-block
function-declaration ::= "func" identifier parameter-list function-body