## LEXICAL GRAMMAR

letter = [A-Za-z]

digit = [0-9]
hex-digit = [A-Fa-f0-9]
oct-digit = [0-7]
bin-digit = 0 | 1
non-zero-digit = [1-9]

string-char = [^\\"]
escaped-string-char = \\[\\"nt]


keyword ::=
	| "void"
	| "bool"
	| "sbyte" | "byte"
	| "short" | "ushort"
	| "int" | "uint"
	| "long" | "ulong"
	| "float" | "double"
	...


identifier-head ::= letter | "_"
identifier-body ::= identifier-head | digit
identifier ::= identifier-head { identifier-body }

integer-literal-suffix ::= "u" | "U" | "l" | "L" | "ul" | "UL"
hex-integer-literal ::= "0x" hex-digit { hex-digit }
bin-integer-literal ::= "0b" bin-digit { bin-digit }
oct-integer-literal ::= "0o" oct-digit { oct-digit }
dec-integer-literal ::= "0" | non-zero-digit { digit }

integer-literal ::=
	| dec-integer-literal
	| hex-integer-literal
	| bin-integer-literal
	| oct-integer-literal
	[ integer-literal-suffix ]

floating-literal-suffix ::= "f" | "F"
floating-literal ::= [ dec-integer-literal ] "." { digit } [ floating-literal-suffix ]

string-literal ::= """ { string-char | escaped-string-char } """

## SYNTACTICAL GRAMMAR