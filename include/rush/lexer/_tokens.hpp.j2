#pragma once

#ifndef RUSH_LEXER_TOKENS_HPP
#define RUSH_LEXER_TOKENS_HPP

#include "rush/lexer/_keywords.hpp"
#include "rush/lexer/_symbols.hpp"

namespace rush {

	namespace tokens {
	{% for symbol in symbols %}
		// \brief Returns an instance of rush::lexical_token representing {{ symbol/description }}{% if existsIn(symbol, "symbol") %} ({{ symbol/symbol }}) symbol{% endif %}.
		inline lexical_token {{ symbol/name }}() {
			return lexical_token { symbols::{{ symbol/name }} };
		}
	{% endfor %}

		// \brief Returns an instance of rush::lexical_token representing a string literal.
		inline lexical_token string_literal(std::string val) {
			return lexical_token { val };
		}

		// \brief Returns an instance of rush::lexical_token representing a floating point literal.
		inline lexical_token floating_literal(double val) {
			return lexical_token { val };
		}

		// \brief Returns an instance of rush::lexical_token representing an integer literal.
		inline lexical_token integer_literal(std::uint64_t val) {
			return lexical_token { val };
		}

		// \brief Returns an instance of rush::lexical_token representing an identifier.
		inline lexical_token identifier(std::string ident) {
			return lexical_token { ident };
		}

	{% for type in types %}
		// \brief Returns an instance of rush::lexical_token representing {{ type/description }} type.
		inline lexical_token {{ type/name }}_keyword() {
			return lexical_token { keywords::{{ type/name }}_ };
		}
	{% endfor %}

	{% for keyword in keywords %}
		// \brief Returns an instance of rush::lexical_token representing {{ keyword/description }} keyword.
		inline lexical_token {{ keyword/name }}_keyword() {
			return lexical_token { keywords::{{ keyword/name }}_ };
		}
	{% endfor %}
	}

}

#endif // RUSH_LEXER_TOKENS_HPP
