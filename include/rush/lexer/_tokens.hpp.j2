#pragma once

#ifndef RUSH_LEXER_TOKENS_HPP
#define RUSH_LEXER_TOKENS_HPP

#include "rush/core/source.hpp"
#include "rush/lexer/_keywords.hpp"
#include "rush/lexer/_symbols.hpp"

namespace rush {

	namespace tokens {

		// \brief Returns an instance of rush::lexical_token representing an error.
		inline lexical_token make_error_token(std::string val, location const& loc, rush::source const& src) {
			return lexical_token { lexical_token::error_t { val }, loc, src };
		}

      // \brief Returns an instance of rush::lexical_token representing a comment.
      inline lexical_token make_comment_token(std::string val, location const& loc, rush::source const& src) {
         return lexical_token { lexical_token::comment_t { std::move(val) }, loc, src };
      }

		// \brief Returns an instance of rush::lexical_token representing the specified symbol.
		inline lexical_token make_symbol_token(symbol_token_t val, location const& loc, rush::source const& src) {
			return lexical_token { val, loc, src };
		}

		// \brief Returns an instance of rush::lexical_token representing the specified keyword.
		inline lexical_token make_keyword_token(keyword_token_t val, location const& loc, rush::source const& src) {
			return lexical_token { val, loc, src };
		}

		// \brief Returns an instance of rush::lexical_token representing a string literal with the specified prefix.
		inline lexical_token prefixed_string_literal(std::string val, lexical_token_prefix prefix, location const& loc, rush::source const& src) {
			return lexical_token { std::move(val), loc, src };
		}

		// \brief Returns an instance of rush::lexical_token representing a string literal.
		inline lexical_token string_literal(std::string val, location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return prefixed_string_literal(std::move(val), lexical_token_prefix::none, loc, src);
		}

		// \brief Returns an instance of rush::lexical_token representing an integer literal with the specified suffix.
		inline lexical_token suffixed_integer_literal(std::uint64_t val, lexical_token_suffix suffix, location const& loc, rush::source const& src) {
			return lexical_token { lexical_token::integral_t { val, suffix }, loc, src };
		}

		// \brief Returns an instance of rush::lexical_token representing an integer literal.
		inline lexical_token integer_literal(std::uint64_t val, location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return  suffixed_integer_literal(val, lexical_token_suffix::none, loc, src);
		}

		// \brief Returns an instance of rush::lexical_token representing a floating point literal with the specified suffix.
		inline lexical_token suffixed_floating_literal(double val, lexical_token_suffix suffix, location const& loc, rush::source const& src) {
			return lexical_token { lexical_token::floating_t { val, suffix }, loc, src };
		}

		// \brief Returns an instance of rush::lexical_token representing a floating point literal.
		inline lexical_token floating_literal(double val, location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return suffixed_floating_literal(val, lexical_token_suffix::none, loc, src);
		}

		// \brief Returns an instance of rush::lexical_token representing an identifier.
		inline lexical_token identifier(std::string val, location const& loc, rush::source const& src) {
			return lexical_token { lexical_token::identifier_t { std::move(val) }, loc, src };
		}
## for symbol in symbols

		// \brief Returns an instance of rush::lexical_token representing {{ symbol/description }}{% if existsIn(symbol, "symbol") %} ({{ symbol/symbol }}) symbol{% endif %}.
		inline lexical_token {{ symbol/name }}(location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return make_symbol_token(symbols::{{ symbol/name }}, loc, src);
		}
## if existsIn(symbol, "compounded")
## for inner in symbol/compounded

		inline lexical_token {{ inner/name }}(location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return make_symbol_token(symbols::{{ inner/name }}, loc, src);
		}
## endfor
## endif
## endfor
## for type in types

		// \brief Returns an instance of rush::lexical_token representing {{ type/description }} type.
		inline lexical_token {{ type/name }}_keyword(location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return make_keyword_token(keywords::{{ type/name }}_, loc, src);
		}
## endfor
## for keyword in keywords

		// \brief Returns an instance of rush::lexical_token representing {{ keyword/description }} keyword.
		inline lexical_token {{ keyword/name }}_keyword(location const& loc = location::undefined, rush::source const& src = rush::source::none) {
			return make_keyword_token(keywords::{{ keyword/name }}_, loc, src);
		}
## endfor
	}
}

#endif // RUSH_LEXER_TOKENS_HPP
