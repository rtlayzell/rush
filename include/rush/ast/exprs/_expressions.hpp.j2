
#ifdef RUSH_UNARY_EXPRESSION_FACTORY_FUNC_DECLS
namespace rush::ast::exprs {
## for operator in prefix
{# spacing #}
std::unique_ptr<::rush::ast::unary_expression> {{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> operand);
## endfor
{# spacing #}
## for operator in postfix
{# spacing #}
std::unique_ptr<::rush::ast::unary_expression> {{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> operand);
## endfor
{# spacing #}
}
#undef RUSH_UNARY_EXPRESSION_FACTORY_FUNC_DECLS
#endif


#ifdef RUSH_BINARY_EXPRESSION_FACTORY_FUNC_DECLS
namespace rush::ast::exprs {
## for operator in binary
{# spacing #}
std::unique_ptr<::rush::ast::binary_expression> {{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> lhs,
	std::unique_ptr<::rush::ast::expression> rhs);
## endfor
{# spacing #}
}
#undef RUSH_BINARY_EXPRESSION_FACTORY_FUNC_DECLS
#endif


#ifdef RUSH_UNARY_EXPRESSION_FACTORY_FUNC_DEFNS
namespace rush::ast::exprs {
## for operator in prefix
{# spacing #}
std::unique_ptr<::rush::ast::unary_expression>
	{{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> operand) {
	return make_unary_expression(std::move(operand),
		::rush::ast::unary_operator::{{ operator/name }});
}
## endfor
{# spacing #}
## for operator in postfix
{# spacing #}
std::unique_ptr<::rush::ast::unary_expression>
	{{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> operand) {
	return make_unary_expression(std::move(operand),
		::rush::ast::unary_operator::{{ operator/name }});
}
## endfor
{# spacing #}
}
#undef RUSH_UNARY_EXPRESSION_FACTORY_FUNC_DEFNS
#endif

#ifdef RUSH_BINARY_EXPRESSION_FACTORY_FUNC_DEFNS
namespace rush::ast::exprs {
## for operator in binary
{# spacing #}
std::unique_ptr<::rush::ast::binary_expression>
	{{ operator/name }}(
	std::unique_ptr<::rush::ast::expression> lhs,
	std::unique_ptr<::rush::ast::expression> rhs) {
	return make_binary_expr(
			std::move(lhs), std::move(rhs),
			::rush::ast::binary_operator::{{ operator/name }});
}
## endfor
{# spacing #}
}
#undef RUSH_BINARY_EXPRESSION_FACTORY_FUNC_DEFNS
#endif
