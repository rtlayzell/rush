/*************************************************************************
* Copyright 2018 Reegan Troy Layzell
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*************************************************************************/

#ifdef RUSH_UNARY_OPERATOR_ENUM
namespace rush::ast {
	enum class unary_operator : std::uint8_t {
   {% for operator in prefix %}   {{ operator/name }},
   {% endfor %}
   {% for operator in postfix %}   {{ operator/name }},
   {% endfor %}};
}
#undef RUSH_UNARY_OPERATOR_ENUM
#endif

#ifdef RUSH_BINARY_OPERATORS_ENUM
namespace rush::ast {
	enum class binary_operator : std::uint8_t {
   {% for operator in binary %}{% if default(operator/binary_expression, true) %}   {{ operator/name }},
   {% endif %}{% endfor %}};
}
#undef RUSH_BINARY_OPERATORS_ENUM
#endif


#ifdef RUSH_IS_UNARY_PREFIX_OP_FUNC
bool is_unary_prefix_operator(lexical_token const& tok) {
	if (!tok.is_symbol()) return false;
	switch (tok.symbol()) {
	default: return false;
## for operator in prefix
## if existsIn(operator, "symbol_token")
	case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
		return true;
	}
}
#undef RUSH_IS_UNARY_PREFIX_OP_FUNC
#endif

#ifdef RUSH_IS_UNARY_POSTFIX_OP_FUNC
bool is_unary_postfix_operator(lexical_token const& tok) {
   if (!tok.is_symbol()) return false;
   switch (tok.symbol()) {
   default: return false;
## for operator in postfix
## if existsIn(operator, "symbol_token")
   case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
      return true;
   }
}
#undef RUSH_IS_UNARY_POSTFIX_OP_FUNC
#endif

#ifdef RUSH_IS_BINARY_OP_FUNC
bool is_binary_operator(lexical_token const& tok) {
	if (!tok.is_symbol()) return false;
	switch (tok.symbol()) {
	default: return false;
## for operator in binary
## if existsIn(operator, "symbol_token")
	case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
		return true;
	}
}
#undef RUSH_IS_BINARY_OP_FUNC
#endif

#ifdef RUSH_PRECEDENCE_FUNC
int unary_precedence(lexical_token const& tok) {
   assert((is_unary_postfix_operator(tok) || is_unary_prefix_operator(tok)) && "expected unary operator token.");
	switch (tok.symbol()) {
	default: return 0;
## for operator in prefix
## if existsIn(operator, "symbol_token")
	case rush::symbols::{{ operator/symbol_token }}: return {{ operator/precedence }};
## endif
## endfor
	}
}

int binary_precedence(lexical_token const& tok) {
   assert(is_binary_operator(tok) && "expected binary operator token.");
	switch (tok.symbol()) {
	default: return 0;
## for operator in binary
## if existsIn(operator, "symbol_token")
	case rush::symbols::{{ operator/symbol_token }}: return {{ operator/precedence }};
## endif
## endfor
	}
}
#undef RUSH_PRECEDENCE_FUNC
#endif

#ifdef RUSH_ASSOCIATIVITY_FUNC

int binary_associativity(lexical_token const& tok) {
   assert(is_binary_operator(tok) && "expected binary operator token.");
   switch (tok.symbol()) {
   default: return 0;
## for operator in binary
## if existsIn(operator, "symbol_token")
   case rush::symbols::{{ operator/symbol_token }}: return {{ operator/associativity }};
## endif
## endfor
   }
}

#undef RUSH_ASSOCIATIVITY_FUNC
#endif

#ifdef RUSH_VISITOR_FUNC_PROTOTYPES
## for operator in prefix
virtual void visit_{{ operator/name }}_expr(unary_expression const&) {}
## endfor
## for operator in postfix
virtual void visit_{{ operator/name }}_expr(unary_expression const&) {}
## endfor
## for operator in binary
## if default(operator/binary_expression, true)
virtual void visit_{{ operator/name }}_expr(binary_expression const&) {}
## endif
## endfor
#undef RUSH_VISITOR_FUNC_PROTOTYPES
#endif

#ifdef RUSH_UNARY_EXPRESSION_VISIT_SWITCH
switch (expr.opkind()) {
{% for operator in prefix %}case unary_operator::{{ operator/name }}: visit_{{ operator/name }}_expr(expr); break;
{% endfor %}{% for operator in postfix %}case unary_operator::{{ operator/name }}: visit_{{ operator/name }}_expr(expr); break;
{% endfor %}
}
#undef RUSH_UNARY_EXPRESSION_VISIT_SWITCH
#endif

#ifdef RUSH_UNARY_EXPRESSION_PRINT_VISIT_SWITCH
switch (expr.opkind()) {
default: assert("unreachable");
{% for operator in prefix %}case ast::unary_operator::{{ operator/name }}: print_expression("{{ default(operator/display, operator/name) }}", expr); break;
{% endfor %}{% for operator in postfix %}case ast::unary_operator::{{ operator/name }}: print_expression("{{ default(operator/display, operator/name) }}", expr); break;
{% endfor %}
}
#undef RUSH_UNARY_EXPRESSION_PRINT_VISIT_SWITCH
#endif

#ifdef RUSH_BINARY_EXPRESSION_PRINT_VISIT_SWITCH
switch (expr.opkind()) {
default: assert("unreachable");
{% for operator in binary %}{% if default(operator/binary_expression, true) %}case ast::binary_operator::{{ operator/name }}: print_expression("{{ default(operator/display, operator/name) }}", expr); break;
{% endif %}{% endfor %}
}
#undef RUSH_BINARY_EXPRESSION_PRINT_VISIT_SWITCH
#endif

#ifdef RUSH_BINARY_EXPRESSION_VISIT_SWITCH
switch (expr.opkind()) {
## for operator in binary
## if default(operator/binary_expression, true)
case binary_operator::{{ operator/name }}: visit_{{ operator/name }}_expr(expr); break;
## endif
## endfor
}
#undef RUSH_BINARY_EXPRESSION_VISIT_SWITCH
#endif


#ifdef RUSH_TRAVERSAL_UNARY_EXPR_FUNC_IMPLS
## for operator in concat(prefix, postfix)
virtual void visit_{{ operator/name }}_expr(rush::ast::unary_expression const& expr) override { traverse_unary_expr(expr); }
## endfor
#undef RUSH_TRAVERSAL_UNARY_EXPR_FUNC_IMPLS
#endif

#ifdef RUSH_TRAVERSAL_BINARY_EXPR_FUNC_IMPLS
## for operator in binary
## if default(operator/binary_expression, true)
virtual void visit_{{ operator/name }}_expr(rush::ast::binary_expression const& expr) override { traverse_binary_expr(expr); }
## endif
## endfor
#undef RUSH_TRAVERSAL_BINARY_EXPR_FUNC_IMPLS
#endif
