#ifdef RUSH_UNARY_OPERATOR_ENUM
namespace rush::ast {
	enum class unary_operator : std::uint8_t {
   {% for operator in prefix %}   {{ operator/name }},
   {% endfor %}
   {% for operator in postfix %}   {{ operator/name }},
   {% endfor %}};
}
#undef RUSH_UNARY_OPERATOR_ENUM
#endif

#ifdef RUSH_BINARY_OPERATORS_ENUM
namespace rush::ast {
	enum class binary_operator : std::uint8_t {
   {% for operator in binary %}   {{ operator/name }},
   {% endfor %}};
}
#undef RUSH_BINARY_OPERATORS_ENUM
#endif


#ifdef RUSH_IS_UNARY_PREFIX_OP_FUNC
bool is_unary_prefix_op(lexical_token const& tok) {
	if (!tok.is_symbol()) return false;
	switch (tok.symbol()) {
	default: return false;
## for operator in prefix
## if existsIn(operator, "symbol_token")
	{# spacing #}
	case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
	{# spacing #}
		return true;
	}
}
#undef RUSH_IS_UNARY_PREFIX_OP_FUNC
#endif

#ifdef RUSH_IS_UNARY_POSTFIX_OP_FUNC
bool is_unary_postfix_op(lexical_token const& tok) {
   if (!tok.is_symbol()) return false;
   switch (tok.symbol()) {
   default: return false;
## for operator in postfix
## existsIn(operator, "symbol_token")
   {# spacing #}
   case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
   {# spacing #}
      return true;
   }
}
#undef RUSH_IS_UNARY_POSTFIX_OP_FUNC
#endif

#ifdef RUSH_IS_BINARY_OP_FUNC
bool is_binary_op(lexical_token const& tok) {
	if (!tok.is_symbol()) return false;
	switch (tok.symbol()) {
	default: return false;
## for operator in binary
## if existsIn(operator, "symbol_token")
	{# spacing #}
	case rush::symbols::{{ operator/symbol_token }}:
## endif
## endfor
	{# spacing #}
		return true;
	}
}
#undef RUSH_IS_BINARY_OP_FUNC
#endif

#ifdef RUSH_PRECEDENCE_FUNC
int unary_precedence(lexical_token const& tok) {
	switch (tok.symbol()) {
	default: return 0;
## for operator in prefix
	{# spacing #}
	case rush::symbols::{{ operator/symbol_token }}: return {{ operator/precedence }};
## endfor
	{# spacing #}
	}
}

int binary_precedence(lexical_token const& tok) {
	switch (tok.symbol()) {
	default: return 0;
## for operator in binary
	{# spacing #}
	case rush::symbols::{{ operator/symbol_token }}: return {{ operator/precedence }};
## endfor
	{# spacing #}
	}
}
#undef RUSH_PRECEDENCE_FUNC
#endif

#ifdef RUSH_VISITOR_FUNC_PROTOTYPES
## for operator in prefix
{# spacing #}
virtual void visit_{{ operator/name }}_expr(unary_expression const&) {}
## endfor
## for operator in postfix
{# spacing #}
virtual void visit_{{ operator/name }}_expr(unary_expression const&) {}
## endfor
## for operator in binary
{# spacing #}
virtual void visit_{{ operator/name }}_expr(binary_expression const&) {}
## endfor
{# spacing #}
#undef RUSH_VISITOR_FUNC_PROTOTYPES
#endif

#ifdef RUSH_UNARY_EXPRESSION_VISIT_SWITCH
switch (opkind()) {
{% for operator in prefix %}case unary_operator::{{ operator/name }}: v.visit_{{ operator/name }}_expr(*this); break;
{% endfor %}{% for operator in postfix %}case unary_operator::{{ operator/name }}: v.visit_{{ operator/name }}_expr(*this); break;
{% endfor %}
}
#undef RUSH_UNARY_EXPRESSION_VISIT_SWITCH
#endif

#ifdef RUSH_BINARY_EXPRESSION_VISIT_SWITCH
switch (opkind()) {
## for operator in binary
{# spacing #}
case binary_operator::{{ operator/name }}: v.visit_{{ operator/name }}_expr(*this); break;
## endfor
{# spacing #}
}
#undef RUSH_BINARY_EXPRESSION_VISIT_SWITCH
#endif

